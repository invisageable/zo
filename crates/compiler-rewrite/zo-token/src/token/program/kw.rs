use std::collections::HashMap;

use super::Program;

use crate::token::TokenKind;

/// The representation of a keyword.
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum Kw {
  Abstract,
  And,
  Apply,
  As,
  Async,
  Await,
  Else,
  Enum,
  Ext,
  False,
  FnUpper,
  FnLower,
  Fun,
  For,
  If,
  Imu,
  Load,
  Loop,
  Match,
  Me,
  Mut,
  Pack,
  Pub,
  Return,
  Skip,
  Stop,
  Struct,
  True,
  Type,
  Underscore,
  Val,
  Wasm,
  When,
  While,
}

impl std::fmt::Display for Kw {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    match self {
      Self::Abstract => write!(f, "abstract"),
      Self::And => write!(f, "and"),
      Self::Apply => write!(f, "apply"),
      Self::As => write!(f, "as"),
      Self::Async => write!(f, "async"),
      Self::Await => write!(f, "await"),
      Self::Else => write!(f, "else"),
      Self::Enum => write!(f, "enum"),
      Self::Ext => write!(f, "ext"),
      Self::False => write!(f, "false"),
      Self::FnUpper => write!(f, "Fn"),
      Self::FnLower => write!(f, "fn"),
      Self::Fun => write!(f, "fun"),
      Self::For => write!(f, "for"),
      Self::If => write!(f, "if"),
      Self::Imu => write!(f, "imu"),
      Self::Load => write!(f, "load"),
      Self::Loop => write!(f, "loop"),
      Self::Match => write!(f, "match"),
      Self::Me => write!(f, "me"),
      Self::Mut => write!(f, "mut"),
      Self::Pack => write!(f, "pack"),
      Self::Pub => write!(f, "pub"),
      Self::Return => write!(f, "return"),
      Self::Skip => write!(f, "skip"),
      Self::Stop => write!(f, "stop"),
      Self::Struct => write!(f, "struct"),
      Self::True => write!(f, "true"),
      Self::Type => write!(f, "type"),
      Self::Underscore => write!(f, "_"),
      Self::Val => write!(f, "val"),
      Self::Wasm => write!(f, "wasm"),
      Self::When => write!(f, "when"),
      Self::While => write!(f, "while"),
    }
  }
}

/// The keywords dictionnary.
pub fn keywords() -> HashMap<&'static str, TokenKind> {
  HashMap::from([
    ("abstract", TokenKind::Program(Program::Kw(Kw::Abstract))),
    ("and", TokenKind::Program(Program::Kw(Kw::And))),
    ("apply", TokenKind::Program(Program::Kw(Kw::Apply))),
    ("as", TokenKind::Program(Program::Kw(Kw::As))),
    ("async", TokenKind::Program(Program::Kw(Kw::Async))),
    ("await", TokenKind::Program(Program::Kw(Kw::Await))),
    ("else", TokenKind::Program(Program::Kw(Kw::Else))),
    ("enum", TokenKind::Program(Program::Kw(Kw::Enum))),
    ("ext", TokenKind::Program(Program::Kw(Kw::Ext))),
    ("false", TokenKind::Program(Program::Kw(Kw::False))),
    ("Fn", TokenKind::Program(Program::Kw(Kw::FnUpper))),
    ("fn", TokenKind::Program(Program::Kw(Kw::FnLower))),
    ("fun", TokenKind::Program(Program::Kw(Kw::Fun))),
    ("for", TokenKind::Program(Program::Kw(Kw::For))),
    ("if", TokenKind::Program(Program::Kw(Kw::If))),
    ("imu", TokenKind::Program(Program::Kw(Kw::Imu))),
    ("load", TokenKind::Program(Program::Kw(Kw::Load))),
    ("loop", TokenKind::Program(Program::Kw(Kw::Loop))),
    ("match", TokenKind::Program(Program::Kw(Kw::Match))),
    ("me", TokenKind::Program(Program::Kw(Kw::Me))),
    ("mut", TokenKind::Program(Program::Kw(Kw::Mut))),
    ("pack", TokenKind::Program(Program::Kw(Kw::Pack))),
    ("pub", TokenKind::Program(Program::Kw(Kw::Pub))),
    ("return", TokenKind::Program(Program::Kw(Kw::Return))),
    ("skip", TokenKind::Program(Program::Kw(Kw::Skip))),
    ("stop", TokenKind::Program(Program::Kw(Kw::Stop))),
    ("struct", TokenKind::Program(Program::Kw(Kw::Struct))),
    ("true", TokenKind::Program(Program::Kw(Kw::True))),
    ("type", TokenKind::Program(Program::Kw(Kw::Type))),
    ("_", TokenKind::Program(Program::Kw(Kw::Underscore))),
    ("val", TokenKind::Program(Program::Kw(Kw::Val))),
    ("wasm", TokenKind::Program(Program::Kw(Kw::Wasm))),
    ("when", TokenKind::Program(Program::Kw(Kw::When))),
    ("while", TokenKind::Program(Program::Kw(Kw::While))),
  ])
}
